C C++  Java 
    algo -> 

    time ? 
    space ? 


DS -> 
    *1) time complexity  -> time taken by your program 
     2) space complexity -> space taken by your program 

algo -> 
    n item -> time 



    5 -> 5 min 
    10 -> 10 min 



 data -> add read modify destroy
 ---------------------------------------------------------------------------------------------

                                        DS 
        Linear DS                                           NoN Linear

    Array Stack Queue Linked-List                           Tree Graph 

---------------------------------------------------------------------------------------------
C lang ->


time complexity -> 
                1) best 
                2) avg 
                3) worst 



1cr data 

1 2 3 4 5   -> 1 second 
4 5 6 7 8   -> 4 second 
7 8 9 10 11 -> 15 second 

--------------------------------------------------------------------------------------------

 

 for(i=1;i<=n;i++){
    for(j=1;j<=n;j++){
        //
    }
 }

 log -> 

-----------------------------------------------------------------

    int a = 10;


    a = 20;  


array -> a -> hold more than 1 value 
        -> array is a collection of same type of data 

        int a[5]; // 5times -> 4byte =>  20byte -> 

        index -> using index we can access array -> subscript 

        1st item from the array -> a[0] { index starts with 0 , ends with size-1}

        a[0] a[1] a[2] a[3] a[4]

---------------------------------------------------------------------

1. Insert 
2. Display 
3. Exit 

1
Enter location 
1
Enter data 
10 

1
Enter location 
1
Enter data 
20 

1
Enter location 
2
Enter data 
100 



1
Enter location 
2
Enter data 
200 


1
Enter location 
2
Enter data 
500 



1
Enter location 
5
Enter data 
5000 



1
Enter location 
3
Enter data 
3000 


[ 20, 500, 3000, 200, 100]


---------------------------------------------------------------------

10  20  30  40  50  
shift=1 
20  30  40  50  10  





10  20  30  40  50  
shift=3 
40  50  10  20  30 



-------------------------------------------------------------


Why DS  ? 
    - syllabus
    - data org
    - time complexity
    - space complexity 



space complexity ->
        run -> memory consume -> 
        variable : function : 

time complexity ->
     run -> time ? 
     time taken by your program



DS -> alogs -> 
        TC SC -> 



QUEUE 

STACK    - linear DS 

LiFo    :   Last In First Out 


X Y Z A B C 



Array 

----------------------------------------------------------

enter name 
royal

print -> layor 


l
a
y
o
r

---------------------------------------------------------------

FiFo : First In First Out 
FcFs : First Come First Serve 

QUEUE :  movie ticket  
         
PRINTER : DS 5 , KM 5 , X 5

TYPING : KEYBOARD 

--------------------------------------------------------

 Make Array Zero by Subtracting Equal Amounts

Input: nums = [1,5,0,3,5]
Output: 3
Explanation:
In the first operation, choose x = 1. Now, nums = [0,4,0,2,4].
In the second operation, choose x = 2. Now, nums = [0,2,0,0,2].
In the third operation, choose x = 2. Now, nums = [0,0,0,0,0].


Input: nums = [1,5,0,3,5] { when u subtract u have to subtract with all but not if its zero }

1 5 0 3 5 
-1 
0 4 0 2 4 
-2 
0 2 0 0 2 
-2 
0 0 0 0  0
 


Example 2:

Input: nums = [0]
Output: 0
Explanation: Each element in nums is already 0 so no operations are needed.


----------------------------

database -> sachin 

search 
    1) linear search -- beg -- end 
    2) binary search 


sorting -> 
bubble 


selection sort -> asc desc array 




-------------------------------------------------------

print(10)
    1 - 10 

printRev(10)
    10 - 1 

--------------------------------------------------------

recursion -> function calling it self 

a(){
    a(); 
}
//base case -> condition 
-----------------------------------------------------------

cards [] = {10,5,20,6,30,30,40,7};

a[] ={10,20,30,40};
b[] ={5,6,30,7}

battle =>  10,5 
a[] ={20,30,40};
b[] ={6,30,7}
player a win 
a[] ={20,30,40,10,5};
b[] ={6,30,7}


battle => 20,6 
a[] ={30,40,10,5};
b[] ={30,7}
player a win 
a[] ={30,40,10,5,20,6};
b[] ={30,7}


battle => 30,30 
a[] ={40,10,5,20,6};
b[] ={7}
draw 

battle => 30,30,40,7 
a[] ={10,5,20,6};
b[] ={}
player a win 
a[] ={10,5,20,6,30,30,40,7};
b[] ={}

GAME OVER 
player A IS THE WINNER 

max battle 100 
------------------------------------------------------

c c++ java 
array stack 
collection -> 
 
------------------------------------------------------


void divide(int c[],int l,int u){ //0 2 

    int mid = (u+l)/2; //  2

    //l : 0 
    //mid : 2 
    //u : 4 

    if(l < u){ 
        //0 1 2 3 4 
        divide(c,l,mid); 
        //5 6 7 8 9 
        divide(c,mid+1,u);
    }
}

int main(){
    int c[] = {1,2,3,4,5,6,7,8,9,10};
    divide(c,0,SIZE-1);//0,9 
}

    1   2   3   4   5                               6   7   8   9   10  

   1 2 3   4 5                                   6 7 8   9 10

  1   2    3   4   5                        6   7    8         9    10 

---------------------------------------------------------------------------------

DMA - dynamic memory allocation 


int main(){

    int x; //implicit - 4byte 

    // 

    //30minutes 



    return 0; 
}//4 byte release 
-----------------------------------------------------------
SMA 

    int x; 
    char k; 

int a; 


DMA

-------------------------------------------------------------
malloc()- memory allocation -- single block 
calloc()- memory allocation -- n{n can be  1 or 10 or any } number of block with same size    

free() - release allocated memory 

realloc() - resize the allocated memory 

20byte -> malloc 
200byte -> calloc
4byte 10block -> calloc 


int a;  4byte malloc 
char name[30]; // calloc 
 
array -> calloc 
single variable -> malloc 
structure -> malloc {name[30],int ,float,char grade}

------------------------------------------------------

DMA -> pointer variable 

int a;//value 
int *p; //address 
------------------------------------------------------
take 2 pointer read values from user , perform addition 

take 3 pointer from user and find out max value from it 
-------------------------------------------------------

5 number scan -> sum 
1 2 3 4 5 -> 15 
2 2 2 2 2 -> 10 
array ->

int a[5]; 



int *p;
p = calloc(sizeof(int),5);

for(i=0;i<5;i++){
    printf("\nEnter value");
    scan("%d",&p[i]);
}


sum => 


-----------------------------------------------------
dhiraj sir -> 
    royal -> 
            student -> 
                name 
                c cpp java 
                perc 

array -> collection of same type of data 
structure -> collection of diff type of data 


struct keyword 



student app -> 1 student 

MAX 5 

1 Add Student 
2 Display 
Enter choice 


1 
name 
c
cpp
java 


1 Add Student 
2 Display 
Enter choice 

1 
name 
c
cpp
java 

1 Add Student 
2 Display 
Enter choice 
2

Name C CPP JAVA PERC 
X    1   1  1    1
Y    1   1  1    1

------------------------------------------------------------------
 

single ll 
    add at end 
    add at beg 
    display 

    search
    findMax
    findSum 

    

------------------------------------------------------

binary tree -> parent node must have max 2 child [ min : 0  max  : 2 ]


binary search Tree -> BST -> 
            1) i am a binary tree 
            2) parent : smaller - left , bigger - right 

--------------------------------------------------------

AVL -> height balance tree 


BF => -1 0 1 

BF[node] = LH - RH 

Tree BST imbalance -> rotate 

1)Left Rotate 
2)Right Rotate 



imbalance -> ? 
RR : Left Rotate 
LL : Right Rotate 
RL : Right-Left Rotate 
LR : Left-Right Rotate 


------------------------------------------------------------

double rotation -> zig zag **
9,8,7,65,43,24,56,78,98,40,22,11,5

98,76,54,32,12,56,78,90,33,45,67,89,9,87



---------------------------------------------------
GRAPH 

---------------------------------------------

10 values -> 
a b c d 

array 

int a[10]; //10 integer values 

2D array -> 
matrix -> 9 value 

row X col

int a[3][3]; //[]->Row , []->col 
int a[3][5]; //R:3  C:5  Total:15 

    1   2   3 
1
2
3

    1 2 3 4 5 
1
2
3





---------------------------------------------------------------------------------------------------

avl tree-> 


node -> 
    data 
    leftTree 
    rightTree 
    

















